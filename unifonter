#!/usr/bin/python3

import argparse
import itertools
import re
import sys
import unicodedata

kinds = {
    "b": "BOLD",
    "bc": "BOLD SCRIPT",
    "bf": "BOLD FRAKTUR",
    "bi": "BOLD ITALIC",
    "c": "SCRIPT",
    "d": "DOUBLE-STRUCK",
    "f": "FRAKTUR",
    "i": "ITALIC",
    "m": "MONOSPACE",
    "s": "SANS-SERIF",
    "sb": "SANS-SERIF BOLD",
    "sbi": "SANS-SERIF BOLD ITALIC",
    "si": "SANS-SERIF ITALIC",
    "w": "FULLWIDTH"
}

exceptions = {
    "MATHEMATICAL SCRIPT SMALL E": "SCRIPT SMALL E",
    "MATHEMATICAL SCRIPT SMALL O": "SCRIPT SMALL O",
    "MATHEMATICAL SCRIPT SMALL G": "SCRIPT SMALL G",
    "MATHEMATICAL SCRIPT CAPITAL B": "SCRIPT CAPITAL B",
    "MATHEMATICAL SCRIPT CAPITAL E": "SCRIPT CAPITAL E",
    "MATHEMATICAL SCRIPT CAPITAL F": "SCRIPT CAPITAL F",
    "MATHEMATICAL SCRIPT CAPITAL H": "SCRIPT CAPITAL H",
    "MATHEMATICAL SCRIPT CAPITAL I": "SCRIPT CAPITAL I",
    "MATHEMATICAL SCRIPT CAPITAL L": "SCRIPT CAPITAL L",
    "MATHEMATICAL SCRIPT CAPITAL M": "SCRIPT CAPITAL M",
    "MATHEMATICAL SCRIPT CAPITAL R": "SCRIPT CAPITAL R",

    "MATHEMATICAL FRAKTUR CAPITAL C": "BLACK-LETTER CAPITAL C",
    "MATHEMATICAL FRAKTUR CAPITAL H": "BLACK-LETTER CAPITAL H",
    "MATHEMATICAL FRAKTUR CAPITAL I": "BLACK-LETTER CAPITAL I",
    "MATHEMATICAL FRAKTUR CAPITAL R": "BLACK-LETTER CAPITAL R",
    "MATHEMATICAL FRAKTUR CAPITAL Z": "BLACK-LETTER CAPITAL Z",

    "MATHEMATICAL DOUBLE-STRUCK CAPITAL C": "DOUBLE-STRUCK CAPITAL C",
    "MATHEMATICAL DOUBLE-STRUCK CAPITAL H": "DOUBLE-STRUCK CAPITAL H",
    "MATHEMATICAL DOUBLE-STRUCK CAPITAL N": "DOUBLE-STRUCK CAPITAL N",
    "MATHEMATICAL DOUBLE-STRUCK CAPITAL P": "DOUBLE-STRUCK CAPITAL P",
    "MATHEMATICAL DOUBLE-STRUCK CAPITAL Q": "DOUBLE-STRUCK CAPITAL Q",
    "MATHEMATICAL DOUBLE-STRUCK CAPITAL R": "DOUBLE-STRUCK CAPITAL R",
    "MATHEMATICAL DOUBLE-STRUCK CAPITAL Z": "DOUBLE-STRUCK CAPITAL Z",

    "MATHEMATICAL ITALIC SMALL H": "PLANCK CONSTANT",
    }

if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-i", type=argparse.FileType("r"), dest="input")
    parser.add_argument("-o", type=argparse.FileType("w"), default=sys.stdout, dest="output")
    parser.add_argument("-k", choices=sorted(kinds), help="font kind to use:\n"+"\n".join("%3s: %s" % x for x in sorted(kinds.items())), dest="kind")
    parser.add_argument("text", nargs="*")
    args = parser.parse_args()
    if args.kind is None:
        import random
        random.seed()
        kind = random.choice(list(kinds.values()))
    elif args.kind not in kinds:
        parser.error("unknown kind {!r}".format(args.kind))
    else:
        kind = kinds[args.kind]

    if len(args.text) == 0:
        if args.input is not None:
            it = args.input
        else:
            print("reading from stdin", file=sys.stderr)
            it = sys.stdin
    elif args.input is not None:
        it = itertools.chain(args.text, args.input)
    else:
        it = args.text

    if kind != "FULLWIDTH":
        rx = re.compile(r"^LATIN (\S+) LETTER (\S+)$")

    for arg in it:
        s=[]
        for lraw in arg:
            for l in unicodedata.normalize("NFKD", lraw):
                try:
                    name = unicodedata.name(l)
                    if kind == "FULLWIDTH":
                        name = "FULLWIDTH " + name
                    else:
                        name = rx.sub(r"MATHEMATICAL %s \1 \2" % (kind,), name)
                        if name in exceptions:
                            name = exceptions[name]
                    s.append(unicodedata.lookup(name))
                except (ValueError, KeyError):
                    s.append(l)
        print("".join(s), file=args.output)
